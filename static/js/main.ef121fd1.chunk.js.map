{"version":3,"sources":["assets/logo.webp","pages/series/seriesActions.js","pages/series/seriesReducer.js","pages/episode/episodeActions.js","pages/episode/episodeReducer.js","pages/shows/showsActions.js","pages/shows/showsReducer.js","reducers/index.js","store/index.js","routes/history.js","translation/local/nl.js","translation/index.js","translation/local/en.js","components/Search/index.js","pages/search/SearchComponent.js","components/ShowCard/index.js","pages/shows/ShowsComponent.js","pages/shows/showsSelectors.js","pages/shows/ShowsContainer.js","components/EpisodeCard/index.js","pages/series/SeriesComponent.js","pages/series/seriesSelectors.js","pages/series/SeriesContainer.js","pages/episode/EpisodeComponent.js","pages/episode/episodeSelector.js","pages/episode/EpisodeContainer.js","routes/index.js","components/Nav/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","seriesInitialState","seamlessImmutable","fetchingEpisodes","isPending","isRejected","isFulfilled","fetchingDetail","detail","episodes","seriesActionTypes","pending","fulfilled","rejected","seriesReducer","state","arguments","length","undefined","action","type","setIn","set","episodeInitialState","fetchingEpisode","episode","episodeActionTypes","episodeReducer","showsInitialState","fetchingShows","shows","showsActionTypes","showsReducer","rootReducer","combineReducers","series","middleware","applyMiddleware","thunk","logger","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","history","createBrowserHistory","listen","scrollTo","local_nl","logo","search","button","hint","empty","unknown","loading","tryAgain","addLocaleData","concat","Object","toConsumableArray","en","nl","translations","en-US","nl-NL","nlNL","locale","navigator","languages","language","userLanguage","messages","flattenMessages","nestedMessages","prefix","keys","reduce","key","value","prefixedKey","assign","intl","IntlProvider","getChildContext","t","id","formatMessage","Search","props","handleInput","disabled","_useState","useState","_useState2","slicedToArray","setSearch","react_default","a","createElement","className","placeholder","onChange","e","target","onClick","defaultProps","component","react","components_Search","searchText","localStorage","setItem","push","ShowCard","url","imageAlt","title","premiered","rating","gener","desc","role","src","alt","ShowsComponent","fetchShows","this","_this$props","map","show","components_ShowCard","Component","getShows","get","item","image","medium","name","average","genres","join","summary","getFetchingShows","mapDispatchToProps","dispatch","getItem","fetch","then","response","json","data","catch","connect","EpisodeCard","season","number","airdate","SeriesComponent","fetchEpisodes","fetchDetail","_this$props2","match","components_EpisodeCard","getSeriesEpisodes","getSeriesDetail","getFetchingEpisodes","getFetchingDetail","EpisodeComponent","fetchEpisode","getFetchingEpisode","getEpisode","episodeId","Routes","react_router","basename","location","pathname","path","ShowsContainer","exact","SeriesContainer","EpisodeContainer","SearchComponent","from","to","Nav","App","components_Nav","routes","Boolean","hostname","ReactDOM","render","react_router_dom","es","components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef121fd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6d94391f.webp\";","import seamlessImmutable from 'seamless-immutable';\n\nconst seriesInitialState = seamlessImmutable({\n    fetchingEpisodes: {\n        isPending: false,\n        isRejected: false,\n        isFulfilled: false\n    },\n    fetchingDetail: {\n        isPending: false,\n        isRejected: false,\n        isFulfilled: false\n    },\n    detail: {},\n    episodes: []\n});\n\nconst seriesActionTypes = {\n    FETCH_EPISODES: {\n        pending: 'FETCH_EPISODES/pending',\n        fulfilled: 'FETCH_EPISODES/fulfilled',\n        rejected: 'FETCH_EPISODES/rejected'\n    },\n\n    FETCH_DETAIL: {\n        pending: 'FETCH_DETAIL/pending',\n        fulfilled: 'FETCH_DETAIL/fulfilled',\n        rejected: 'FETCH_DETAIL/rejected'\n    },\n\n    SET_SERIES_DETAIL: 'SET_SERIES_DETAIL',\n    SET_SERIES_EPISODES: 'SET_SERIES_EPISODES'\n};\n\nconst fetchEpisodes = () => dispatch => {\n    dispatch({ type: seriesActionTypes.FETCH_EPISODES.pending });\n    const id = localStorage.getItem('showId');\n    return fetch(`http://api.tvmaze.com/shows/${id}/episodes`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: seriesActionTypes.SET_SERIES_EPISODES,\n                episodes: data\n            });\n            dispatch({\n                type: seriesActionTypes.FETCH_EPISODES.fulfilled\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: seriesActionTypes.FETCH_EPISODES.rejected\n            });\n        });\n};\n\nconst fetchDetail = () => dispatch => {\n    dispatch({ type: seriesActionTypes.FETCH_DETAIL.pending });\n    const id = localStorage.getItem('showId');\n    return fetch(`http://api.tvmaze.com/shows/${id}`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: seriesActionTypes.SET_SERIES_DETAIL,\n                detail: data\n            });\n            dispatch({\n                type: seriesActionTypes.FETCH_DETAIL.fulfilled\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: seriesActionTypes.FETCH_DETAIL.rejected\n            });\n        });\n};\n\nexport { seriesInitialState, seriesActionTypes, fetchEpisodes, fetchDetail };\n","import { seriesActionTypes, seriesInitialState } from './seriesActions';\n\nconst seriesReducer = (state = seriesInitialState, action) => {\n    switch (action.type) {\n    case seriesActionTypes.FETCH_EPISODES.fulfilled:\n        return state\n            .setIn(['fetchingEpisodes', 'isPending'], false)\n            .setIn(['fetchingEpisodes', 'isFulfilled'], true)\n            .setIn(['fetchingEpisodes', 'isRejected'], false);\n    case seriesActionTypes.FETCH_EPISODES.pending:\n        return state\n            .setIn(['fetchingEpisodes', 'isPending'], true)\n            .setIn(['fetchingEpisodes', 'isFulfilled'], false)\n            .setIn(['fetchingEpisodes', 'isRejected'], false);\n    case seriesActionTypes.FETCH_EPISODES.rejected:\n        return state\n            .setIn(['fetchingEpisodes', 'isPending'], false)\n            .setIn(['fetchingEpisodes', 'isFulfilled'], false)\n            .setIn(['fetchingEpisodes', 'isRejected'], true);\n\n    case seriesActionTypes.FETCH_DETAIL.fulfilled:\n        return state\n            .setIn(['fetchingDetail', 'isPending'], false)\n            .setIn(['fetchingDetail', 'isFulfilled'], true)\n            .setIn(['fetchingDetail', 'isRejected'], false);\n    case seriesActionTypes.FETCH_DETAIL.pending:\n        return state\n            .setIn(['fetchingDetail', 'isPending'], true)\n            .setIn(['fetchingDetail', 'isFulfilled'], false)\n            .setIn(['fetchingDetail', 'isRejected'], false);\n    case seriesActionTypes.FETCH_DETAIL.rejected:\n        return state\n            .setIn(['fetchingDetail', 'isPending'], false)\n            .setIn(['fetchingDetail', 'isFulfilled'], false)\n            .setIn(['fetchingDetail', 'isRejected'], true);\n\n    case seriesActionTypes.SET_SERIES_DETAIL:\n        return state.set(\n            'detail',\n            action.detail || seriesInitialState.detail\n        );\n    case seriesActionTypes.SET_SERIES_EPISODES:\n        return state.set('episodes', action.episodes);\n\n    default:\n        return state;\n    }\n};\n\nexport default seriesReducer;\n","import seamlessImmutable from 'seamless-immutable';\n\nconst episodeInitialState = seamlessImmutable({\n    fetchingEpisode: {\n        isPending: false,\n        isRejected: false,\n        isFulfilled: false\n    },\n    episode: {}\n});\n\nconst episodeActionTypes = {\n    FETCH_EPISODE: {\n        pending: 'FETCH_EPISODE/pending',\n        fulfilled: 'FETCH_EPISODE/fulfilled',\n        rejected: 'FETCH_EPISODE/rejected'\n    },\n\n    SET_EPISODE: 'SET_EPISODE'\n};\n\nconst fetchEpisode = () => dispatch => {\n    dispatch({ type: episodeActionTypes.FETCH_EPISODE.pending });\n    const episodeId = localStorage.getItem('episodeId');\n    return fetch(`http://api.tvmaze.com/episodes/${episodeId}`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: episodeActionTypes.SET_EPISODE,\n                episode: data\n            });\n            dispatch({\n                type: episodeActionTypes.FETCH_EPISODE.fulfilled\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: episodeActionTypes.FETCH_EPISODE.rejected\n            });\n        });\n};\n\nexport { episodeInitialState, episodeActionTypes, fetchEpisode };\n","import { episodeActionTypes, episodeInitialState } from './episodeActions';\n\nconst episodeReducer = (state = episodeInitialState, action) => {\n    switch (action.type) {\n    case episodeActionTypes.FETCH_EPISODE.fulfilled:\n        return state\n            .setIn(['fetchingEpisode', 'isPending'], false)\n            .setIn(['fetchingEpisode', 'isFulfilled'], true)\n            .setIn(['fetchingEpisode', 'isRejected'], false);\n    case episodeActionTypes.FETCH_EPISODE.pending:\n        return state\n            .setIn(['fetchingEpisode', 'isPending'], true)\n            .setIn(['fetchingEpisode', 'isFulfilled'], false)\n            .setIn(['fetchingEpisode', 'isRejected'], false);\n    case episodeActionTypes.FETCH_EPISODE.rejected:\n        return state\n            .setIn(['fetchingEpisode', 'isPending'], false)\n            .setIn(['fetchingEpisode', 'isFulfilled'], false)\n            .setIn(['fetchingEpisode', 'isRejected'], true);\n\n    case episodeActionTypes.SET_EPISODE:\n        return state.set(\n            'episode',\n            action.episode || episodeInitialState.episode\n        );\n\n    default:\n        return state;\n    }\n};\n\nexport default episodeReducer;\n","import seamlessImmutable from 'seamless-immutable';\n\nconst showsInitialState = seamlessImmutable({\n    fetchingShows: {\n        isPending: false,\n        isRejected: false,\n        isFulfilled: false\n    },\n    shows: []\n});\n\nconst showsActionTypes = {\n    FETCH_SHOWS: {\n        pending: 'FETCH_SHOWS/pending',\n        fulfilled: 'FETCH_SHOWS/fulfilled',\n        rejected: 'FETCH_SHOWS/rejected'\n    },\n    SET_SHOWS: 'SET_SHOWS'\n};\n\nconst fetchShows = () => dispatch => {\n    const searchText = localStorage.getItem('searchText');\n    dispatch({ type: showsActionTypes.FETCH_SHOWS.pending });\n\n    return fetch(`http://api.tvmaze.com/search/shows?q=${searchText}`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: showsActionTypes.SET_SHOWS,\n                shows: data\n            });\n            dispatch({\n                type: showsActionTypes.FETCH_SHOWS.fulfilled\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: showsActionTypes.FETCH_SHOWS.rejected\n            });\n        });\n};\n\nexport { showsInitialState, showsActionTypes, fetchShows };\n","import { showsActionTypes, showsInitialState } from './showsActions';\n\nconst showsReducer = (state = showsInitialState, action) => {\n    switch (action.type) {\n    case showsActionTypes.FETCH_SHOWS.fulfilled:\n        return state\n            .setIn(['fetchingShows', 'isPending'], false)\n            .setIn(['fetchingShows', 'isFulfilled'], true)\n            .setIn(['fetchingShows', 'isRejected'], false);\n    case showsActionTypes.FETCH_SHOWS.pending:\n        return state\n            .setIn(['fetchingShows', 'isPending'], true)\n            .setIn(['fetchingShows', 'isFulfilled'], false)\n            .setIn(['fetchingShows', 'isRejected'], false);\n    case showsActionTypes.FETCH_SHOWS.rejected:\n        return state\n            .setIn(['fetchingShows', 'isPending'], false)\n            .setIn(['fetchingShows', 'isFulfilled'], false)\n            .setIn(['fetchingShows', 'isRejected'], true);\n\n    case showsActionTypes.SET_SHOWS:\n        return state.set('shows', action.shows || showsInitialState.shows);\n\n    default:\n        return state;\n    }\n};\n\nexport default showsReducer;\n","import { combineReducers } from 'redux';\nimport seriesReducer from '../pages/series/seriesReducer';\nimport episodeReducer from '../pages/episode/episodeReducer';\nimport showsReducer from '../pages/shows/showsReducer';\n\nconst rootReducer = combineReducers({\n    shows: showsReducer,\n    series: seriesReducer,\n    episode: episodeReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from '../reducers';\n\nconst middleware = applyMiddleware(thunk, logger);\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        middleware,\n        reduxDevTools\n    )\n);\n\nexport default store;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nhistory.listen(() => {\n    window.scrollTo(0, 0);\n});\n\nexport default history;\n","export default {\n    logo: 'MyTV Logo',\n    search: {\n        button: 'Zoeken',\n        hint: \"Zoek naar je favoriete tv-programma's\"\n    },\n    episodes: 'Afleveringen',\n    empty: 'Geen shows beschikbaar voor uw zoekopdracht',\n    unknown: 'Onbekend',\n    loading: 'Bezig met laden',\n    tryAgain: 'Serverfout, probeer opnieuw'\n};\n","import { addLocaleData, IntlProvider } from 'react-intl';\nimport en from 'react-intl/locale-data/en';\nimport nl from 'react-intl/locale-data/nl';\n\nimport enUS from './local/en';\nimport nlNL from './local/nl';\n\naddLocaleData([...en, ...nl]);\n\nconst translations = {\n    'en-US': enUS,\n    'nl-NL': nlNL,\n    nl: nlNL\n};\n\nconst locale =\n    (navigator.languages && navigator.languages[0]) ||\n    navigator.language ||\n    navigator.userLanguage ||\n    'en-US';\n\nconst flattenMessages = (nestedMessages, prefix = '') => {\n    return Object.keys(nestedMessages).reduce((messages, key) => {\n        const value = nestedMessages[key];\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === 'string') {\n            // eslint-disable-next-line no-param-reassign\n            messages[prefixedKey] = value;\n        } else {\n            Object.assign(messages, flattenMessages(value, prefixedKey));\n        }\n\n        return messages;\n    }, {});\n};\n\nconst messages = flattenMessages(translations[locale] || translations['en-US']);\nconst intlProvider = new IntlProvider({ locale, messages });\nconst { intl } = intlProvider.getChildContext();\n\nconst t = id => {\n    return intl.formatMessage({ id });\n};\n\nexport default t;\n","export default {\n    logo: 'MyTV Logo',\n    search: {\n        button: 'Search',\n        hint: 'Search for your favorite TV shows'\n    },\n    episodes: 'Episodes',\n    empty: 'No Shows available for your search',\n    unknown: 'Unknown',\n    loading: 'Loading',\n    tryAgain: 'Server error, try again'\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport t from '../../translation';\nimport './_style.scss';\n\nconst Search = props => {\n    const { handleInput, disabled } = props;\n    const [search, setSearch] = useState('');\n    return (\n        <div className=\"Search\">\n            <input\n                className=\"Search-input\"\n                type=\"search\"\n                placeholder={t('search.hint')}\n                disabled={disabled}\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n            />\n            <button\n                className=\"Search-button\"\n                type=\"button\"\n                onClick={() => handleInput(search)}\n            >\n                {t('search.button')}\n            </button>\n        </div>\n    );\n};\n\nSearch.propTypes = {\n    handleInput: PropTypes.func.isRequired,\n    disabled: PropTypes.bool\n};\n\nSearch.defaultProps = {\n    disabled: false\n};\n\nexport default Search;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '../../components/Search';\n\nconst component = props => {\n    const { history } = props;\n    const handleSearch = searchText => {\n        localStorage.setItem('searchText', searchText);\n        history.push('/shows');\n    };\n    return (\n        <div className=\"Search container\">\n            <Fragment>\n                <Search handleInput={handleSearch} />\n            </Fragment>\n        </div>\n    );\n};\n\ncomponent.propTypes = {\n    history: PropTypes.any.isRequired\n};\n\nexport default component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './_style.scss';\n\nconst ShowCard = props => {\n    const {\n        url,\n        imageAlt,\n        title,\n        premiered,\n        rating,\n        type,\n        gener,\n        desc,\n        onClick\n    } = props;\n    return (\n        <div className=\"ShowCard\" onClick={onClick} role=\"presentation\">\n            <img className=\"ShowCard-image\" src={url} alt={imageAlt} />\n            <span className=\"ShowCard-content\">\n                <span className=\"ShowCard-content--title\">{title}</span>\n                <span className=\"ShowCard-content--premiered\">\n                    Premiered: {premiered}\n                </span>\n                {rating && (\n                    <span className=\"ShowCard-content--rating\">{rating}</span>\n                )}\n                <span className=\"ShowCard-content--type\">{type}</span>\n                <span className=\"ShowCard-content--gener\">{gener}</span>\n                <span className=\"ShowCard-content--desc\">{desc}</span>\n            </span>\n        </div>\n    );\n};\n\nShowCard.propTypes = {\n    url: PropTypes.string.isRequired,\n    imageAlt: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    premiered: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    type: PropTypes.string.isRequired,\n    gener: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nShowCard.defaultProps = {\n    rating: 0\n};\n\nexport default ShowCard;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ShowCard from '../../components/ShowCard';\nimport './_style.scss';\nimport t from '../../translation';\n\nclass ShowsComponent extends Component {\n    componentDidMount() {\n        const { fetchShows } = this.props;\n        fetchShows();\n    }\n\n    render() {\n        const { shows, history, fetchingShows } = this.props;\n        if (fetchingShows.isPending) {\n            return <p>{t('loading')}</p>;\n        }\n        if (fetchingShows.isRejected) {\n            return <p>{t('tryAgain')}</p>;\n        }\n        return (\n            <div className=\"Shows container\">\n                {shows.length ? (\n                    <div className=\"Shows-grid\">\n                        {shows.map(show => (\n                            <div key={show.id}>\n                                <ShowCard\n                                    {...show}\n                                    onClick={() => {\n                                        localStorage.setItem('showId', show.id);\n                                        history.push('/series');\n                                    }}\n                                />\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p className=\"Shows-empty\">{t('empty')}</p>\n                )}\n            </div>\n        );\n    }\n}\n\nShowsComponent.propTypes = {\n    shows: PropTypes.array.isRequired,\n    fetchingShows: PropTypes.object.isRequired,\n    fetchShows: PropTypes.func.isRequired,\n    history: PropTypes.any.isRequired\n};\n\nexport default ShowsComponent;\n","import { get } from 'lodash';\nimport t from '../../translation';\n\nconst getShows = state => {\n    const shows = get(state, 'shows.shows');\n    return shows.map(show => {\n        const item = show.show;\n        return (\n            item && {\n                id: item.id,\n                url: item.image\n                    ? item.image.medium\n                    : 'https://via.placeholder.com/200?text=MyTV',\n                imageAlt: item.name,\n                title: item.name,\n                premiered: item.premiered || t('unknown'),\n                rating: item.rating.average,\n                type: item.language,\n                gener: item.genres.join(' | '),\n                desc: item.summary\n            }\n        );\n    });\n};\nconst getFetchingShows = state => get(state, 'shows.fetchingShows');\n\nexport { getShows, getFetchingShows };\n","import { connect } from 'react-redux';\nimport ShowsComponent from './ShowsComponent';\nimport { getShows, getFetchingShows } from './showsSelectors';\nimport { fetchShows } from './showsActions';\n\nconst mapStateToProps = state => ({\n    shows: getShows(state),\n    fetchingShows: getFetchingShows(state)\n});\n\nconst mapDispatchToProps = {\n    fetchShows\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ShowsComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './_style.scss';\n\nconst EpisodeCard = props => {\n    const { url, imageAlt, title, season, number, airdate, onClick } = props;\n    return (\n        <span className=\"EpisodeCard\" onClick={onClick} role=\"presentation\">\n            <img className=\"EpisodeCard-image\" src={url} alt={imageAlt} />\n            <span className=\"EpisodeCard-content\">\n                <span className=\"EpisodeCard-content--title\">{title}</span>\n                <span className=\"EpisodeCard-content--episode\">\n                    Season: {season} Number: {number}\n                </span>\n                <span className=\"EpisodeCard-content--airDate\">\n                    Airdate: {airdate}\n                </span>\n            </span>\n        </span>\n    );\n};\n\nEpisodeCard.propTypes = {\n    url: PropTypes.string.isRequired,\n    imageAlt: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    season: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n    airdate: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default EpisodeCard;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ShowCard from '../../components/ShowCard';\nimport EpisodeCard from '../../components/EpisodeCard';\nimport './_style.scss';\nimport t from '../../translation';\n\nclass SeriesComponent extends Component {\n    componentDidMount() {\n        const { fetchEpisodes, fetchDetail } = this.props;\n        fetchEpisodes();\n        fetchDetail();\n    }\n\n    render() {\n        const { detail, episodes, history, match } = this.props;\n        return (\n            <div className=\"Series container\">\n                <ShowCard {...detail} onClick={() => {}} />\n                <p className=\"Series-episodeTitle\">{t('episodes')}</p>\n                <div className=\"Series-grid\">\n                    {episodes.map(episode => (\n                        <EpisodeCard\n                            key={episode.id}\n                            {...episode}\n                            onClick={() => {\n                                localStorage.setItem('episodeId', episode.id);\n                                history.push(`${match.url}/episode`);\n                            }}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nSeriesComponent.propTypes = {\n    detail: PropTypes.object.isRequired,\n    episodes: PropTypes.array.isRequired,\n    fetchEpisodes: PropTypes.func.isRequired,\n    fetchDetail: PropTypes.func.isRequired,\n    history: PropTypes.any.isRequired,\n    match: PropTypes.any.isRequired\n};\n\nexport default SeriesComponent;\n","import { get } from 'lodash';\nimport t from '../../translation';\n\nconst getSeriesEpisodes = state => {\n    const episodes = get(state, 'series.episodes');\n    return episodes.map(episode => {\n        return {\n            id: episode.id,\n            title: episode.name,\n            season: episode.season,\n            number: episode.number,\n            airdate: episode.airdate,\n            url: episode.image\n                ? episode.image.medium\n                : 'https://via.placeholder.com/100?text=MyTV',\n            imageAlt: episode.name,\n            summary: episode.summary\n        };\n    });\n};\nconst getSeriesDetail = state => {\n    const detail = get(state, 'series.detail');\n    return {\n        id: detail.id,\n        url: detail.image\n            ? detail.image.medium\n            : 'https://via.placeholder.com/200?text=MyTV',\n        imageAlt: detail.name,\n        title: detail.name,\n        premiered: detail.premiered || t('unknown'),\n        rating: detail.rating && detail.rating.average,\n        type: detail.language,\n        gener: detail.genres && detail.genres.join(' | '),\n        desc: detail.summary\n    };\n};\nconst getFetchingEpisodes = state => get(state, 'series.fetchingEpisodes');\nconst getFetchingDetail = state => get(state, 'series.fetchingDetail');\n\nexport {\n    getSeriesEpisodes,\n    getSeriesDetail,\n    getFetchingEpisodes,\n    getFetchingDetail\n};\n","import { connect } from 'react-redux';\nimport SeriesComponent from './SeriesComponent';\nimport { fetchEpisodes, fetchDetail } from './seriesActions';\n\nimport {\n    getSeriesDetail,\n    getSeriesEpisodes,\n    getFetchingEpisodes,\n    getFetchingDetail\n} from './seriesSelectors';\n\nconst mapStateToProps = state => ({\n    detail: getSeriesDetail(state),\n    episodes: getSeriesEpisodes(state),\n    fetchingEpisodes: getFetchingEpisodes(state),\n    fetchingDetail: getFetchingDetail(state)\n});\n\nconst mapDispatchToProps = { fetchEpisodes, fetchDetail };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SeriesComponent);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './_style.scss';\n\nclass EpisodeComponent extends Component {\n    componentDidMount() {\n        const { fetchEpisode } = this.props;\n        fetchEpisode();\n    }\n\n    render() {\n        const { episode } = this.props;\n        const { url, imageAlt, title, season, number, airdate, desc } = episode;\n        return (\n            <div className=\"Episode container\">\n                <img className=\"Episode-image\" src={url} alt={imageAlt} />\n                <span className=\"Episode-content\">\n                    <span className=\"Episode-content--title\">{title}</span>\n                    <span className=\"Episode-content--episode\">\n                        Season: {season} Number: {number}\n                    </span>\n                    <span className=\"Episode-content--airDate\">\n                        Airdate: {airdate}\n                    </span>\n                    <span className=\"Episode-content--desc\">{desc}</span>\n                </span>\n            </div>\n        );\n    }\n}\n\nEpisodeComponent.propTypes = {\n    fetchEpisode: PropTypes.func.isRequired,\n    episode: PropTypes.object.isRequired\n};\n\nexport default EpisodeComponent;\n","import { get } from 'lodash';\n\nconst getFetchingEpisode = state => get(state, 'episode.fetchingEpisode');\nconst getEpisode = state => {\n    const episode = get(state, 'episode.episode');\n    return {\n        id: episode.id,\n        title: episode.name,\n        season: episode.season,\n        number: episode.number,\n        airdate: episode.airdate,\n        url: episode.image\n            ? episode.image.medium\n            : 'https://via.placeholder.com/100?text=MyTV',\n        imageAlt: episode.name,\n        desc: episode.summary\n    };\n};\n\nexport { getEpisode, getFetchingEpisode };\n","import { connect } from 'react-redux';\nimport EpisodeComponent from './EpisodeComponent';\nimport { fetchEpisode } from './episodeActions';\n\nimport { getEpisode, getFetchingEpisode } from './episodeSelector';\n\nconst mapStateToProps = state => ({\n    episode: getEpisode(state),\n    fetchingEpisode: getFetchingEpisode(state)\n});\n\nconst mapDispatchToProps = { fetchEpisode };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EpisodeComponent);\n","import React from 'react';\nimport { Router, Route, Switch, Redirect } from 'react-router-dom';\nimport history from './history';\nimport SearchComponent from '../pages/search/SearchComponent';\nimport ShowsContainer from '../pages/shows/ShowsContainer';\nimport SeriesContainer from '../pages/series/SeriesContainer';\nimport EpisodeContainer from '../pages/episode/EpisodeContainer';\n\nconst Routes = () => {\n    return (\n        <Router history={history}>\n            <Switch basename={window.location.pathname || ''}>\n                <Route path=\"/shows\" component={ShowsContainer} />\n                <Route exact path=\"/series\" component={SeriesContainer} />\n                <Route\n                    exact\n                    path=\"/series/episode\"\n                    component={EpisodeContainer}\n                />\n                <Route path=\"/search\" component={SearchComponent} />\n                <Redirect exact from=\"/\" to=\"/search\" />\n            </Switch>\n        </Router>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './_style.scss';\nimport t from '../../translation';\nimport logo from '../../assets/logo.webp';\n\nconst Nav = () => {\n    return (\n        <div className=\"Nav\">\n            <span className=\"Nav-logo\">\n                <img src={logo} alt={t('logo')} /> MyTV\n            </span>\n        </div>\n    );\n};\n\nexport default Nav;\n","import React from 'react';\nimport './_style.scss';\nimport Routes from '../../routes';\nimport Nav from '../Nav';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Nav />\n            <Routes />\n        </div>\n    );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './_style.scss';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}