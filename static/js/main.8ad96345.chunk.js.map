{"version":3,"sources":["assets/logo.webp","translation/local/nl.js","translation/index.js","translation/local/en.js","components/Search/index.js","pages/search/component.js","pages/search/selectors.js","pages/search/actions.js","pages/search/container.js","pages/search/reducer.js","reducers/index.js","store/index.js","routes/history.js","routes/index.js","components/Nav/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","local_nl","logo","search","placeholder","hint","addLocaleData","concat","Object","toConsumableArray","en","nl","translations","en-US","nl-NL","nlNL","locale","navigator","languages","language","userLanguage","messages","flattenMessages","nestedMessages","prefix","arguments","length","undefined","keys","reduce","key","value","prefixedKey","assign","intl","IntlProvider","getChildContext","t","id","formatMessage","Search","props","handleInput","disabled","react_default","a","createElement","className","type","onKeyPress","e","defaultProps","component","fetchingShows","searchText","setSearchText","react","components_Search","target","isPending","getSearchText","state","get","getShows","getFetchingShows","searchInitialState","seamlessImmutable","isRejected","isFulfilled","shows","searchActionTypes","pending","fulfilled","rejected","fetchShows","dispatch","getState","fetch","then","response","json","data","catch","mapDispatchToProps","connect","searchReducer","action","setIn","set","rootReducer","combineReducers","middleware","applyMiddleware","thunk","logger","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","history","createBrowserHistory","listen","scrollTo","Routes","react_router","basename","location","pathname","path","SearchPage","exact","from","to","Nav","src","alt","App","components_Nav","routes","Boolean","hostname","match","ReactDOM","render","react_router_dom","es","components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ad96345.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6d94391f.webp\";","export default {\n    logo: 'MyTV Logo',\n    search: {\n        placeholder: 'Zoeken',\n        hint: \"Zoek naar je favoriete tv-programma's\"\n    }\n};\n","import { addLocaleData, IntlProvider } from 'react-intl';\nimport en from 'react-intl/locale-data/en';\nimport nl from 'react-intl/locale-data/nl';\n\nimport enUS from './local/en';\nimport nlNL from './local/nl';\n\naddLocaleData([...en, ...nl]);\n\nconst translations = {\n    'en-US': enUS,\n    'nl-NL': nlNL,\n    nl: nlNL\n};\n\nconst locale =\n    (navigator.languages && navigator.languages[0]) ||\n    navigator.language ||\n    navigator.userLanguage ||\n    'en-US';\n\nconst flattenMessages = (nestedMessages, prefix = '') => {\n    return Object.keys(nestedMessages).reduce((messages, key) => {\n        const value = nestedMessages[key];\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === 'string') {\n            // eslint-disable-next-line no-param-reassign\n            messages[prefixedKey] = value;\n        } else {\n            Object.assign(messages, flattenMessages(value, prefixedKey));\n        }\n\n        return messages;\n    }, {});\n};\n\nconst messages = flattenMessages(translations[locale] || translations['en-US']);\nconst intlProvider = new IntlProvider({ locale, messages });\nconst { intl } = intlProvider.getChildContext();\n\nconst t = id => {\n    return intl.formatMessage({ id });\n};\n\nexport default t;\n","export default {\n    logo: 'MyTV Logo',\n    search: {\n        placeholder: 'Search',\n        hint: 'Search for your favorite TV shows'\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport t from '../../translation';\nimport './_style.scss';\n\nconst Search = props => {\n    const { handleInput, disabled } = props;\n    return (\n        <div className=\"Search\">\n            <input\n                className=\"Search-input\"\n                type=\"search\"\n                placeholder={t('search.placeholder')}\n                onKeyPress={e => handleInput(e)}\n                disabled={disabled}\n            />\n            <p className=\"Search-hint\">{t('search.hint')}</p>\n        </div>\n    );\n};\n\nSearch.propTypes = {\n    handleInput: PropTypes.func.isRequired,\n    disabled: PropTypes.bool\n};\n\nSearch.defaultProps = {\n    disabled: false\n};\n\nexport default Search;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '../../components/Search';\n\nconst component = props => {\n    const { fetchingShows, searchText, setSearchText } = props;\n    const handleSearch = e => {\n        if (e.key === 'Enter') {\n            setSearchText(e.target.value);\n        }\n    };\n    return (\n        <div className=\"Search container\">\n            <Fragment>\n                <Search\n                    handleInput={handleSearch}\n                    value={searchText}\n                    disabled={fetchingShows.isPending}\n                />\n            </Fragment>\n        </div>\n    );\n};\n\ncomponent.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    fetchingShows: PropTypes.object.isRequired,\n    searchText: PropTypes.string.isRequired,\n    setSearchText: PropTypes.func.isRequired\n};\n\nexport default component;\n","import { get } from 'lodash';\n\nconst getSearchText = state => get(state, 'search.searchText');\nconst getShows = state => get(state, 'search.shows');\nconst getFetchingShows = state => get(state, 'search.fetchingShows');\n\nexport { getSearchText, getShows, getFetchingShows };\n","import seamlessImmutable from 'seamless-immutable';\nimport { getSearchText } from './selectors';\n\nconst searchInitialState = seamlessImmutable({\n    fetchingShows: {\n        isPending: false,\n        isRejected: false,\n        isFulfilled: false\n    },\n    searchText: '',\n    shows: []\n});\n\nconst searchActionTypes = {\n    FETCH_SHOWS: {\n        pending: 'FETCH_SHOWS/pending',\n        fulfilled: 'FETCH_SHOWS/fulfilled',\n        rejected: 'FETCH_SHOWS/rejected'\n    },\n\n    SET_SEARCH_TEXT: 'SET_SEARCH_TEXT',\n    SET_SHOWS: 'SET_SHOWS'\n};\n\nconst fetchShows = () => (dispatch, getState) => {\n    const searchText = getSearchText(getState());\n    dispatch({ type: searchActionTypes.FETCH_SHOWS.pending });\n\n    return fetch(`http://api.tvmaze.com/search/shows?q=${searchText}`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: searchActionTypes.SET_SHOWS,\n                shows: data\n            });\n            dispatch({\n                type: searchActionTypes.FETCH_SHOWS.fulfilled\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: searchActionTypes.FETCH_SHOWS.rejected\n            });\n        });\n};\n\nconst setSearchText = searchText => dispatch => {\n    dispatch({ type: searchActionTypes.SET_SEARCH_TEXT, searchText });\n    dispatch(fetchShows());\n};\n\nexport { searchInitialState, searchActionTypes, fetchShows, setSearchText };\n","import { connect } from 'react-redux';\nimport component from './component';\nimport { getShows, getFetchingShows, getSearchText } from './selectors';\nimport { fetchShows, setSearchText } from './actions';\n\nconst mapStateToProps = state => ({\n    shows: getShows(state),\n    fetchingShows: getFetchingShows(state),\n    searchText: getSearchText(state)\n});\n\nconst mapDispatchToProps = {\n    fetchShows,\n    setSearchText\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(component);\n","import { searchActionTypes, searchInitialState } from './actions';\n\nconst searchReducer = (state = searchInitialState, action) => {\n    switch (action.type) {\n    case searchActionTypes.FETCH_SHOWS.fulfilled:\n        return state\n            .setIn(['fetchingShows', 'isPending'], false)\n            .setIn(['fetchingShows', 'isFulfilled'], true)\n            .setIn(['fetchingShows', 'isRejected'], false);\n    case searchActionTypes.FETCH_SHOWS.pending:\n        return state\n            .setIn(['fetchingShows', 'isPending'], true)\n            .setIn(['fetchingShows', 'isFulfilled'], false)\n            .setIn(['fetchingShows', 'isRejected'], false);\n    case searchActionTypes.FETCH_SHOWS.rejected:\n        return state\n            .setIn(['fetchingShows', 'isPending'], false)\n            .setIn(['fetchingShows', 'isFulfilled'], false)\n            .setIn(['fetchingShows', 'isRejected'], true);\n\n    case searchActionTypes.SET_SHOWS:\n        return state.set('shows', action.shows || searchInitialState.shows);\n    case searchActionTypes.SET_SEARCH_TEXT:\n        return state.set('searchText', action.searchText);\n\n    default:\n        return state;\n    }\n};\n\nexport default searchReducer;\n","import { combineReducers } from 'redux';\nimport { searchReducer } from '../pages/search';\n\nconst rootReducer = combineReducers({\n    search: searchReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from '../reducers';\n\nconst middleware = applyMiddleware(thunk, logger);\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        middleware,\n        reduxDevTools\n    )\n);\n\nexport default store;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nhistory.listen(() => {\n    window.scrollTo(0, 0);\n});\n\nexport default history;\n","import React from 'react';\nimport { Router, Route, Switch, Redirect } from 'react-router-dom';\nimport history from './history';\nimport { SearchPage } from '../pages/search';\n\nconst Routes = () => {\n    return (\n        <Router history={history}>\n            <Switch basename={window.location.pathname || ''}>\n                <Route path=\"/search\" component={SearchPage} />\n                <Redirect exact from=\"/\" to=\"/search\" />\n            </Switch>\n        </Router>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './_style.scss';\nimport t from '../../translation';\nimport logo from '../../assets/logo.webp';\n\nconst Nav = () => {\n    return (\n        <div className=\"Nav\">\n            <span className=\"Nav-logo\">\n                <img src={logo} alt={t('logo')} /> MyTV\n            </span>\n        </div>\n    );\n};\n\nexport default Nav;\n","import React from 'react';\nimport './_style.scss';\nimport Routes from '../../routes';\nimport Nav from '../Nav';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Nav />\n            <Routes />\n        </div>\n    );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './_style.scss';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}